/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { delete$ } from '../fn/time-capsule-message-controller/delete';
import { Delete$Params } from '../fn/time-capsule-message-controller/delete';
import { EmailResponse } from '../models/email-response';
import { getAll } from '../fn/time-capsule-message-controller/get-all';
import { GetAll$Params } from '../fn/time-capsule-message-controller/get-all';
import { MsgResponseDto } from '../models/msg-response-dto';
import { save } from '../fn/time-capsule-message-controller/save';
import { Save$Params } from '../fn/time-capsule-message-controller/save';
import { updateMsg } from '../fn/time-capsule-message-controller/update-msg';
import { UpdateMsg$Params } from '../fn/time-capsule-message-controller/update-msg';

@Injectable({ providedIn: 'root' })
export class TimeCapsuleMessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMsg()` */
  static readonly UpdateMsgPath = '/timeCapsuleMessage/updateMsg/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMsg()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMsg$Response(params: UpdateMsg$Params, context?: HttpContext): Observable<StrictHttpResponse<MsgResponseDto>> {
    return updateMsg(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMsg$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMsg(params: UpdateMsg$Params, context?: HttpContext): Observable<MsgResponseDto> {
    return this.updateMsg$Response(params, context).pipe(
      map((r: StrictHttpResponse<MsgResponseDto>): MsgResponseDto => r.body)
    );
  }

  /** Path part for operation `save()` */
  static readonly SavePath = '/timeCapsuleMessage/save';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `save()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  save$Response(params?: Save$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailResponse>> {
    return save(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `save$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  save(params?: Save$Params, context?: HttpContext): Observable<EmailResponse> {
    return this.save$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailResponse>): EmailResponse => r.body)
    );
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/timeCapsuleMessage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MsgResponseDto>>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<Array<MsgResponseDto>> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MsgResponseDto>>): Array<MsgResponseDto> => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/timeCapsuleMessage/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
